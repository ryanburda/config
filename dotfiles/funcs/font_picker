#!/bin/zsh
#
# NAME
#   font_picker - changes font in alacritty.
#
# SYNOPSIS
#   font_picker
#
# DESCRIPTION
#   Use fzf to select a font. The font is then substituted into alacritty.yml
fonts=(
    "FiraCode Nerd Font Mono"
    "Hack Nerd Font Mono"
    "JetBrainsMono Nerd Font Mono"
    "Liga SFMono Nerd Font"
    "SauceCodePro Nerd Font Mono"
    "OpenDyslexicM Nerd Font Mono"
    "SpaceMono Nerd Font Mono"
    "GohuFont 14 Nerd Font Mono"
    "ProggyClean Nerd Font Mono"
    "Monofur Nerd Font Mono"
)

current_font=$(<$XDG_CONFIG_HOME/alacritty/.font)

function set_font(){
    # This function expects a single string argument representing the font to switch to.
    font=$1

    # Before updating the alacritty.yml we first need to get the current theme.
    # The template does not contain any information about themes so we will use
    # the following variable to reapply the current theme after the the yml is
    # recreated off the template.
    theme=$(alacritty-themes --current | head -n 1)

    # Fill in the font name in the template to create a new alacritty.yml file.
    export ALACRITTY_FONT=$font
    # Write the font selection to a file to better handle cases where the envvar is not set.
    echo "$ALACRITTY_FONT" > $XDG_CONFIG_HOME/alacritty/.font

    # Recreate alacritty.yml based off the template.
    envsubst < "${XDG_CONFIG_HOME}/alacritty/alacritty.yml.template" > "${XDG_CONFIG_HOME}/alacritty/alacritty.yml"

    # Reapply the color theme.
    alacritty-themes $theme > /dev/null
    # remove the annoying backup files created by alacritty-themes
    rm $XDG_CONFIG_HOME/alacritty/alacritty.yml.*.bak
}

selection=$(printf "%s\n" "${fonts[@]}" | sort -r | fzf --bind "focus:execute(set_font {})")
if [[ -z "${selection}" ]]; then
    # reset font if nothing selected
    set_font $current_font
    return 0
fi
set_font $selection
