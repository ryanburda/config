# Remove custom keybinds before reapplying.
unbind-key -a

# Options
set-option -g default-terminal "${TERM}"
set-option -g status-position bottom
set-option -g status-style "fg=default,bg=default"
set-option -g automatic-rename off
set-option -g pane-border-lines heavy
set-option -g pane-border-indicators both
set-option -g pane-border-style "fg=black"
set-option -g pane-active-border-style "fg=green"
set-option -g popup-border-lines heavy
set-option -g detach-on-destroy off
set-option -s exit-unattached off
set-option -g display-time 2000
set-option -g repeat-time 500
set-option -g escape-time 0
set-option -g focus-events on
set-option -g mode-keys vi
set-option -as terminal-features ",*:RGB"
set-option -ag terminal-overrides ",xterm-256color:RGB"
set-option -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set-option -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colors
set-window-option -g mouse on

# Prefix
unbind C-b
set-option -g prefix C-Space
bind-key C-Space send-prefix

# Keybinds
bind-key . source-file "${XDG_CONFIG_HOME}/tmux/tmux.conf" \; display "tmux conf reloaded!"
bind-key : command-prompt
bind-key ? list-keys
bind-key Enter attach-session -c "#{pane_current_path}"
bind-key t new-window -c "#{pane_current_path}"
bind-key j split-window -v -l 12 -c "#{pane_current_path}"
bind-key l split-window -h -l 80 -c "#{pane_current_path}"
bind-key i previous-window
bind-key o next-window
bind-key k copy-mode
bind-key x kill-pane
bind-key X run-shell "tmux kill-session -t #S"
bind-key B break-pane
bind-key p popup -h 80% -w 80%
bind-key d popup -h 80% -w 80% -E "lazydocker"
bind-key g popup -h 80% -w 80% -E "lazygit"
bind-key m popup -h 29 -w 68 "cal -A 7 -B 1"
# TODO: move environment variables into zprofile (?) so they are sourced.
bind-key s popup -h 24 -w 50 -E "source ~/.zshrc; ~/.zsh/funcs/tmux_session_select"
bind-key c popup -h 23 -w 34 -E "source ~/.zshrc; set_colorscheme"
bind-key v popup -h 20 -w 45 -E "source ~/.zshrc; set_font"
bind-key b popup -h 17 -w 30 -E "source ~/.zshrc; set_background"
bind-key h popup -h 17 -w 30 -E "source ~/.zshrc; set_shader"
bind-key f popup -h 80% -w 80% -E "~/.zsh/funcs/find_file"
# https://github.com/pyenv/pyenv-virtualenv/issues/259
bind-key a send-keys 'eval "$(pyenv init -)" && eval "$(pyenv virtualenv-init -)" && source activate $(cat .python-version)'

unbind Space

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/mrjones2014/smart-splits.nvim
# NOTE: when is_vim, send-keys must match up with corresponding keymap in vim. (ie C-h maps to `require('smart-splits').move_cursor_left`)
is_vim="ps -o tty= -o state= -o comm= | grep -iqE '^#{s|/dev/||:pane_tty} +[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'
bind-key -r 'C-h' if-shell "$is_vim" 'send-keys " Rh"' 'resize-pane -L'
bind-key -r 'C-j' if-shell "$is_vim" 'send-keys " Rj"' 'resize-pane -D'
bind-key -r 'C-k' if-shell "$is_vim" 'send-keys " Rk"' 'resize-pane -U'
bind-key -r 'C-l' if-shell "$is_vim" 'send-keys " Rl"' 'resize-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"
bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R

# Vi copypaste mode
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"

# Status bar
set -g status-left-length 30
set -g status-left '#S'

set -g status-right-length 30
set -g status-right '#(TZ="UTC" date -u "+%%Y-%%m-%%d %%H:%%M")'

set -g status-justify centre
set -g window-status-current-format "#I:#W* "
set -g window-status-format "#I:#W "
